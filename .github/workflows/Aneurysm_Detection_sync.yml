name: Sync from Upstream (Aneurysm_Detection)

on:
  # ⚠️ Cron is ignored on forks; it will work after you detach from fork or use a scheduler repo.
  # Daily at 09:00 CST/CDT equivalent in UTC (two entries handle DST):
  schedule:
    - cron: "0 15 * * *"   # 09:00 CST (UTC-6)
    - cron: "0 14 * * *"   # 09:00 CDT (UTC-5)

  workflow_dispatch:
    inputs:
      mode:
        description: "push (mirror) or pr (open PR)"
        required: false
        default: pr
      branches:
        description: "Comma-separated branches to sync"
        required: false
        default: main
      include_tags:
        description: "Also sync tags? true/false"
        required: false
        default: "false"

  # While this repo is still a fork, editing THIS file will trigger a run for testing.
  push:
    branches: [ main ]                         # ← change if your default branch isn't 'main'
    paths:
      - ".github/workflows/Aneurysm_Detection_sync.yml"

permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      # Upstream repo to sync from:
      UPSTREAM_URL: https://github.com/2ai-lab/Aneurysm_Detection.git

      MODE:         ${{ github.event.inputs.mode || 'pr' }}       # 'push' to mirror, 'pr' to review
      BRANCHES:     ${{ github.event.inputs.branches || 'main' }}
      INCLUDE_TAGS: ${{ github.event.inputs.include_tags || 'false' }}

      # Tokens used for git pushes and gh CLI (PAT optional; GITHUB_TOKEN works for most public repos)
      PUSH_TOKEN:   ${{ secrets.PAT || github.token }}
      GH_TOKEN:     ${{ secrets.PAT || github.token }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ env.PUSH_TOKEN }}

      - name: Configure git author
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote & fetch
        run: |
          git remote remove upstream || true
          git remote add upstream "$UPSTREAM_URL"
          if [ "$INCLUDE_TAGS" = "true" ]; then
            git fetch upstream --tags --prune
          else
            git fetch upstream --prune
          fi

      - name: Push mode (mirror/overwrite)
        if: ${{ env.MODE == 'push' }}
        shell: bash
        run: |
          IFS=',' read -ra BR <<< "$BRANCHES"
          for b in "${BR[@]}"; do
            b="$(echo "$b" | xargs)"
            echo "Mirroring branch: $b"
            git checkout -B "$b" || git checkout -b "$b"
            git reset --hard "upstream/$b" || { echo "::error::Upstream branch '$b' not found."; exit 1; }
            git push origin "$b" --force
          done

      - name: PR mode (safe / works with protected branches)
        if: ${{ env.MODE == 'pr' }}
        shell: bash
        run: |
          IFS=',' read -ra BR <<< "$BRANCHES"
          for b in "${BR[@]}"; do
            b="$(echo "$b" | xargs)"
            echo "Preparing PR for branch: $b"
            git checkout -B "$b" || git checkout -b "$b"
            git fetch upstream "$b" || { echo "::error::Upstream branch '$b' not found."; exit 1; }

            set +e
            git rebase "upstream/$b"
            rc=$?
            set -e

            if [ $rc -ne 0 ]; then
              echo "Rebase conflict; creating merge PR branch."
              git rebase --abort || true
              git checkout -B "$b-sync-upstream"
              git merge --no-ff --no-edit "upstream/$b" || true
            else
              git checkout -B "$b-sync-upstream"
            fi

            git push origin "$b-sync-upstream" --force
            gh pr create \
              --title "Sync from upstream ($b)" \
              --body  "Automated sync from $UPSTREAM_URL on branch $b." \
              --base "$b" \
              --head "$b-sync-upstream" \
            || gh pr edit "$b-sync-upstream" \
              --title "Sync from upstream ($b)" \
              --body  "Automated sync from $UPSTREAM_URL on branch $b."
